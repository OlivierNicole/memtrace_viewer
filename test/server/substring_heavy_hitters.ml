open! Core

module CharHH = Memtrace_viewer_native.For_testing.Substring_heavy_hitters.Make (struct
  include Char

  let dummy = Char.max_value
end)

let process lines =
  let heavy_hitters = CharHH.create ~tolerance:0.01 in
  let (_ : string) =
    List.fold lines ~init:"" ~f:(fun prev_line line ->
      let common_prefix = String.common_prefix2_length prev_line line in
      let after_prefix = String.drop_prefix line common_prefix in
      let word = after_prefix |> String.to_array in
      CharHH.insert heavy_hitters word ~common_prefix ~count:1;
      line)
  in
  CharHH.calculate_totals heavy_hitters ~heaviness_frequency:0.1;
  heavy_hitters
;;

let print pred heavy_hitters =
  let root = CharHH.root heavy_hitters in
  let rec loop node =
    if pred heavy_hitters node
    then
      eprint_s
        [%message
          ""
            (CharHH.Node.label node |> Array.to_list |> String.of_char_list)
            ~total_count:(CharHH.Node.total_count node : int)];
    CharHH.Node.iter_children node ~f:loop ~root
  in
  loop (CharHH.Node.Root.node root)
;;

let lines =
  {|
    To be, or not to be, that is the question:
    Whether 'tis nobler in the mind to suffer
    The slings and arrows of outrageous fortune,
    Or to take arms against a sea of troubles
    And by opposing end them. To die—to sleep,
    No more; and by a sleep to say we end
    The heart-ache and the thousand natural shocks
    That flesh is heir to: 'tis a consummation
    Devoutly to be wish'd. To die, to sleep;
    To sleep, perchance to dream—ay, there's the rub:
    For in that sleep of death what dreams may come,
    When we have shuffled off this mortal coil,
    Must give us pause—there's the respect
    That makes calamity of so long life.
    For who would bear the whips and scorns of time,
    Th'oppressor's wrong, the proud man's contumely,
    The pangs of dispriz'd love, the law's delay,
    The insolence of office, and the spurns
    That patient merit of th'unworthy takes,
    When he himself might his quietus make
    With a bare bodkin? Who would fardels bear,
    To grunt and sweat under a weary life,
    But that the dread of something after death,
    The undiscovere'd country, from whose bourn
    No traveller returns, puzzles the will,
    And makes us rather bear those ills we have
    Than fly to others that we know not of?
    Thus conscience doth make cowards of us all,
    And thus the native hue of resolution
    Is sicklied o'er with the pale cast of thought,
    And enterprises of great pith and moment
    With this regard their currents turn awry
    And lose the name of action.
  |}
  |> String.split_lines
  |> List.map ~f:String.strip
  |> List.filter ~f:(fun s -> not (String.is_empty s))
;;

let%expect_test "shakespeare" =
  let heavy_hitters = process lines in
  print CharHH.is_heavy heavy_hitters;
  [%expect
    {|
    ("And " (total_count 5))
    (Tha (total_count 4))
    ("The " (total_count 5))
    ("To " (total_count 5))
    (Wh (total_count 4))
    (" a " (total_count 5))
    (" and " (total_count 7))
    (" b" (total_count 11))
    (" be" (total_count 6))
    (" co" (total_count 7))
    (" d" (total_count 10))
    (" f" (total_count 5))
    (" i" (total_count 6))
    (" l" (total_count 6))
    (" m" (total_count 12))
    (" make" (total_count 4))
    (" n" (total_count 6))
    (" o" (total_count 22))
    (" of " (total_count 14))
    (" of t" (total_count 4))
    (" p" (total_count 8))
    (" pa" (total_count 4))
    (" re" (total_count 4))
    (" s" (total_count 17))
    (" sleep" (total_count 5))
    (" that " (total_count 4))
    (" the " (total_count 14))
    (" to " (total_count 8))
    (" u" (total_count 5))
    (" w" (total_count 15))
    (" we " (total_count 4))
    (" wh" (total_count 4))
    (al (total_count 5))
    (am (total_count 4))
    (an (total_count 12))
    (ar (total_count 11))
    (at (total_count 17))
    (ay (total_count 4))
    (c (total_count 23))
    (ce (total_count 4))
    ("d " (total_count 24))
    ("d the" (total_count 4))
    (de (total_count 5))
    (di (total_count 4))
    ("e " (total_count 41))
    ("e h" (total_count 5))
    (e, (total_count 9))
    ("e, " (total_count 5))
    (ear (total_count 5))
    (eat (total_count 4))
    (el (total_count 5))
    (en (total_count 10))
    (ent (total_count 4))
    ("er " (total_count 7))
    (es (total_count 11))
    ("es " (total_count 4))
    (et (total_count 4))
    (f (total_count 32))
    (ff (total_count 4))
    (' (total_count 13))
    ("'s " (total_count 5))
    (g (total_count 14))
    ("hat " (total_count 8))
    (he (total_count 33))
    (hi (total_count 6))
    (ho (total_count 7))
    (hu (total_count 4))
    (ie (total_count 6))
    (in (total_count 9))
    (is (total_count 11))
    ("is " (total_count 7))
    ("ith " (total_count 4))
    (k (total_count 10))
    (, (total_count 24))
    (", th" (total_count 4))
    (le (total_count 13))
    (li (total_count 4))
    (ll (total_count 4))
    (me (total_count 7))
    (. (total_count 4))
    ("n " (total_count 6))
    ("nd th" (total_count 4))
    (ng (total_count 6))
    (no (total_count 4))
    (ns (total_count 7))
    (om (total_count 4))
    (on (total_count 9))
    (or (total_count 9))
    (os (total_count 4))
    (ot (total_count 4))
    (ou (total_count 11))
    (p (total_count 22))
    (pr (total_count 4))
    ("r " (total_count 15))
    ("r t" (total_count 4))
    (ra (total_count 4))
    (re (total_count 15))
    (rea (total_count 4))
    (ro (total_count 5))
    (rt (total_count 4))
    ("s a" (total_count 5))
    ("s of " (total_count 5))
    ("s the " (total_count 5))
    (se (total_count 7))
    (sh (total_count 4))
    (so (total_count 5))
    (st (total_count 4))
    ("t " (total_count 20))
    (ther (total_count 5))
    (ti (total_count 9))
    (tion (total_count 4))
    ("to s" (total_count 4))
    (tr (total_count 4))
    (tu (total_count 6))
    (un (total_count 6))
    (urn (total_count 4))
    ("us " (total_count 7))
    (ut (total_count 4))
    (ve (total_count 7))
    (w (total_count 22))
    ("y " (total_count 9))
    (y, (total_count 4)) |}];
  print CharHH.contains_heavy heavy_hitters;
  [%expect
    {|
    ("" (total_count 33))
    ("And " (total_count 5))
    (T (total_count 16))
    (Th (total_count 11))
    (Tha (total_count 4))
    ("The " (total_count 5))
    ("To " (total_count 5))
    (W (total_count 6))
    (Wh (total_count 4))
    (" " (total_count 223))
    (" a" (total_count 19))
    (" a " (total_count 5))
    (" and " (total_count 7))
    (" b" (total_count 11))
    (" be" (total_count 6))
    (" c" (total_count 10))
    (" co" (total_count 7))
    (" d" (total_count 10))
    (" f" (total_count 5))
    (" h" (total_count 8))
    (" i" (total_count 6))
    (" l" (total_count 6))
    (" m" (total_count 12))
    (" ma" (total_count 6))
    (" make" (total_count 4))
    (" n" (total_count 6))
    (" o" (total_count 22))
    (" of" (total_count 17))
    (" of " (total_count 14))
    (" of t" (total_count 4))
    (" p" (total_count 8))
    (" pa" (total_count 4))
    (" r" (total_count 6))
    (" re" (total_count 4))
    (" s" (total_count 17))
    (" sl" (total_count 6))
    (" sleep" (total_count 5))
    (" t" (total_count 43))
    (" th" (total_count 28))
    (" that " (total_count 4))
    (" the" (total_count 17))
    (" the " (total_count 14))
    (" to" (total_count 9))
    (" to " (total_count 8))
    (" u" (total_count 5))
    (" w" (total_count 15))
    (" we" (total_count 5))
    (" we " (total_count 4))
    (" wh" (total_count 4))
    (a (total_count 79))
    ("a " (total_count 6))
    (ake (total_count 6))
    (al (total_count 5))
    (am (total_count 4))
    (an (total_count 12))
    ("and " (total_count 8))
    (ar (total_count 11))
    (at (total_count 17))
    ("at " (total_count 10))
    (ay (total_count 4))
    (b (total_count 14))
    (be (total_count 6))
    (c (total_count 23))
    (ce (total_count 4))
    (co (total_count 9))
    (d (total_count 41))
    ("d " (total_count 24))
    ("d t" (total_count 6))
    ("d th" (total_count 5))
    ("d the" (total_count 4))
    (de (total_count 5))
    (di (total_count 4))
    (e (total_count 136))
    ("e " (total_count 41))
    ("e h" (total_count 5))
    (e, (total_count 9))
    ("e, " (total_count 5))
    (ea (total_count 13))
    (ear (total_count 5))
    (eat (total_count 4))
    (eep (total_count 5))
    (el (total_count 5))
    (en (total_count 10))
    (ent (total_count 4))
    (ep (total_count 5))
    (er (total_count 15))
    ("er " (total_count 7))
    (es (total_count 11))
    ("es " (total_count 4))
    (et (total_count 4))
    (f (total_count 32))
    ("f " (total_count 16))
    ("f t" (total_count 5))
    (ff (total_count 4))
    (' (total_count 13))
    ("'s " (total_count 5))
    (g (total_count 14))
    (h (total_count 76))
    ("h " (total_count 7))
    (ha (total_count 12))
    ("hat " (total_count 8))
    (he (total_count 33))
    ("he " (total_count 21))
    (her (total_count 5))
    (hi (total_count 6))
    (ho (total_count 7))
    (hu (total_count 4))
    (i (total_count 52))
    (ie (total_count 6))
    (in (total_count 9))
    (ion (total_count 4))
    (is (total_count 11))
    ("is " (total_count 7))
    (it (total_count 6))
    ("ith " (total_count 4))
    (k (total_count 10))
    (ke (total_count 6))
    (, (total_count 24))
    (", " (total_count 10))
    (", t" (total_count 5))
    (", th" (total_count 4))
    (l (total_count 41))
    (le (total_count 13))
    (leep (total_count 5))
    (li (total_count 4))
    (ll (total_count 4))
    (m (total_count 27))
    (ma (total_count 7))
    (make (total_count 4))
    (me (total_count 7))
    (. (total_count 4))
    (n (total_count 63))
    ("n " (total_count 6))
    (nd (total_count 18))
    ("nd " (total_count 15))
    ("nd t" (total_count 5))
    ("nd th" (total_count 4))
    (ng (total_count 6))
    (no (total_count 4))
    (ns (total_count 7))
    (nt (total_count 7))
    (o (total_count 92))
    ("o " (total_count 19))
    ("o s" (total_count 5))
    (of (total_count 17))
    ("of " (total_count 14))
    ("of t" (total_count 4))
    (om (total_count 4))
    (on (total_count 9))
    (or (total_count 9))
    (os (total_count 4))
    (ot (total_count 4))
    (ou (total_count 11))
    (p (total_count 22))
    (pa (total_count 4))
    (pr (total_count 4))
    (r (total_count 68))
    ("r " (total_count 15))
    ("r t" (total_count 4))
    (ra (total_count 4))
    (re (total_count 15))
    (rea (total_count 4))
    (rn (total_count 5))
    (ro (total_count 5))
    (rt (total_count 4))
    (s (total_count 81))
    ("s " (total_count 36))
    ("s a" (total_count 5))
    ("s of " (total_count 5))
    ("s t" (total_count 7))
    ("s th" (total_count 6))
    ("s the " (total_count 5))
    (se (total_count 7))
    (sh (total_count 4))
    (sl (total_count 6))
    (sleep (total_count 5))
    (so (total_count 5))
    (st (total_count 4))
    (t (total_count 102))
    ("t " (total_count 20))
    (th (total_count 41))
    ("th " (total_count 6))
    ("that " (total_count 4))
    (the (total_count 21))
    ("the " (total_count 14))
    (ther (total_count 5))
    (ti (total_count 9))
    (tion (total_count 4))
    (to (total_count 10))
    ("to " (total_count 9))
    ("to s" (total_count 4))
    (tr (total_count 4))
    (tu (total_count 6))
    (u (total_count 40))
    (un (total_count 6))
    (ur (total_count 6))
    (urn (total_count 4))
    (us (total_count 10))
    ("us " (total_count 7))
    (ut (total_count 4))
    (v (total_count 8))
    (ve (total_count 7))
    (w (total_count 22))
    (we (total_count 6))
    ("we " (total_count 4))
    (wh (total_count 4))
    (y (total_count 14))
    ("y " (total_count 9))
    (y, (total_count 4)) |}]
;;

let common_prefixes =
  let state = Random.State.make [| 6; 4; 3; 2; 1 |] in
  List.map ~f:(fun line -> Random.State.int state (String.length line)) lines
;;

let repetitive_lines =
  let _, lines =
    List.fold2_exn lines common_prefixes ~init:("", []) ~f:(fun (prev, acc) line rep ->
      let common_prefix = min (String.length prev) (String.length line) in
      let rest = String.length line - common_prefix in
      let line =
        String.concat
          [ String.sub prev ~pos:0 ~len:common_prefix
          ; String.sub line ~pos:common_prefix ~len:rest
          ]
      in
      let repeat = String.sub line ~pos:0 ~len:rep in
      repeat, line :: acc)
  in
  List.rev lines
;;

let%expect_test "repetitive_lines" =
  List.iter ~f:print_endline repetitive_lines;
  [%expect
    {|
    To be, or not to be, that is the question:
    To be, or not to be, that is the questfer
    The slings and arrows of outrageous fortune,
    The slings arms against a sea of troubles
    The slings arms againhem. To die—to sleep,
    The slings arms againhe to say we end
    The slings che and the thousand natural shocks
    The slings che and the thousand natural on
    Tevoutly to be wish'd. To die, to sleep;
    Tevoutly toerchance to dream—ay, there's the rub:
    Tevoutly toerchance to dream— dreams may come,
    Tevoutly toerchance to dream— dreams may
    Tevoutlye us pause—there's the respect
    Tevoutakes calamity of so long life.
    Tevowho would bear the whips and scorns of time,
    Tevowho would bear the whips and scorns of time,
    Tevowho would bear the whie, the law's delay,
    Tevowho would bear the whand the spurns
    Tevowho would beit of th'unworthy takes,
    Tevowho would beit of his quietus make
    Tevowho would beit of his qld fardels bear,
    Tevowho would beit ofder a weary life,
    Tevowho would read of something after death,
    Tevowhoiscovere'd country, from whose bourn
    Tevowhoiscovere'd country, from whose ,
    Tevowhois us rather bear those ills we have
    Tevowhois us rather bear those ills we
    Tevowhois us rather bear  cowards of us all,
    Tevowhois us rather bear  cowards of
    Tevowhois uso'er with the pale cast of thought,
    Ted enterprises of great pith and moment
    Ted enhis regard their currents turn awry
    Ted lose the name of action. |}]
;;

let%expect_test "repetitive shakespeare" =
  let heavy_hitters = process repetitive_lines in
  print CharHH.is_heavy heavy_hitters;
  [%expect
    {|
    (Te (total_count 25))
    ("Tevoutly to" (total_count 4))
    (Tevowho (total_count 16))
    ("Tevowho would bear the wh" (total_count 4))
    ("Tevowho would beit of" (total_count 4))
    ("Tevowhois us rather bear " (total_count 4))
    ("The slings a" (total_count 4))
    ("To " (total_count 4))
    (" and " (total_count 6))
    (" ar" (total_count 4))
    (" c" (total_count 10))
    (" co" (total_count 5))
    (" dream" (total_count 5))
    (" f" (total_count 4))
    (" i" (total_count 4))
    (" l" (total_count 5))
    (" m" (total_count 4))
    (" n" (total_count 5))
    (" of t" (total_count 5))
    (" q" (total_count 4))
    (" r" (total_count 8))
    (" s" (total_count 16))
    (" sl" (total_count 8))
    (" the " (total_count 14))
    (" tho" (total_count 5))
    (" to " (total_count 8))
    (" w" (total_count 21))
    (" we" (total_count 4))
    (ag (total_count 4))
    (al (total_count 5))
    (ard (total_count 4))
    (at (total_count 10))
    (ay (total_count 5))
    (b (total_count 21))
    ("\226\128\148" (total_count 5))
    (c (total_count 23))
    (ch (total_count 5))
    ("d " (total_count 26))
    ("d the" (total_count 4))
    (de (total_count 4))
    ("e " (total_count 38))
    ("e to " (total_count 4))
    ("e, t" (total_count 4))
    (ea (total_count 19))
    (en (total_count 5))
    (er (total_count 16))
    (ere' (total_count 4))
    (es (total_count 7))
    (' (total_count 8))
    (ga (total_count 4))
    (han (total_count 4))
    ("he " (total_count 23))
    (hi (total_count 7))
    ("hose " (total_count 4))
    (ie (total_count 4))
    (in (total_count 10))
    (is (total_count 14))
    ("is " (total_count 10))
    (k (total_count 4))
    (, (total_count 22))
    (", th" (total_count 4))
    (le (total_count 4))
    (li (total_count 8))
    (me (total_count 6))
    ("ms " (total_count 5))
    (. (total_count 4))
    (nd (total_count 10))
    (ng (total_count 8))
    (ns (total_count 4))
    (nt (total_count 5))
    ("o be, " (total_count 4))
    ("o d" (total_count 5))
    (om (total_count 5))
    (on (total_count 4))
    (or (total_count 6))
    (ou (total_count 24))
    (p (total_count 10))
    ("r " (total_count 18))
    (re (total_count 14))
    (rn (total_count 5))
    (ro (total_count 4))
    (ry (total_count 4))
    ("s a" (total_count 10))
    ("s of " (total_count 6))
    ("s the " (total_count 4))
    (sco (total_count 4))
    (se (total_count 8))
    (st (total_count 4))
    ("t of " (total_count 4))
    (ti (total_count 4))
    (tr (total_count 4))
    (tu (total_count 5))
    (un (total_count 4))
    (ur (total_count 6))
    (us (total_count 12))
    ("us " (total_count 8))
    (v (total_count 25))
    (w (total_count 43))
    ("y " (total_count 10))
    (y, (total_count 4)) |}];
  print CharHH.contains_heavy heavy_hitters;
  [%expect
    {|
    ("" (total_count 33))
    ("\128\148" (total_count 5))
    (T (total_count 35))
    (Te (total_count 25))
    (Tevo (total_count 22))
    (Tevout (total_count 6))
    (Tevoutly (total_count 5))
    ("Tevoutly to" (total_count 4))
    (Tevowho (total_count 16))
    ("Tevowho would " (total_count 9))
    ("Tevowho would be" (total_count 8))
    ("Tevowho would bear the wh" (total_count 4))
    ("Tevowho would beit of" (total_count 4))
    (Tevowhois (total_count 7))
    ("Tevowhois us" (total_count 5))
    ("Tevowhois us rather bear " (total_count 4))
    ("The slings " (total_count 6))
    ("The slings a" (total_count 4))
    ("To " (total_count 4))
    ("\148" (total_count 5))
    (" " (total_count 212))
    (" a" (total_count 19))
    (" and " (total_count 6))
    (" ar" (total_count 4))
    (" b" (total_count 19))
    (" be" (total_count 18))
    (" be, " (total_count 4))
    (" bear" (total_count 9))
    (" bear " (total_count 8))
    (" bear th" (total_count 6))
    (" bear the wh" (total_count 4))
    (" beit of" (total_count 4))
    (" c" (total_count 10))
    (" co" (total_count 5))
    (" d" (total_count 9))
    (" dream" (total_count 5))
    (" f" (total_count 4))
    (" i" (total_count 4))
    (" l" (total_count 5))
    (" m" (total_count 4))
    (" n" (total_count 5))
    (" o" (total_count 19))
    (" of" (total_count 15))
    (" of " (total_count 14))
    (" of t" (total_count 5))
    (" q" (total_count 4))
    (" r" (total_count 8))
    (" rather bear " (total_count 4))
    (" s" (total_count 16))
    (" sl" (total_count 8))
    (" slings " (total_count 6))
    (" slings a" (total_count 4))
    (" t" (total_count 40))
    (" th" (total_count 24))
    (" the" (total_count 16))
    (" the " (total_count 14))
    (" the wh" (total_count 4))
    (" tho" (total_count 5))
    (" to" (total_count 11))
    (" to " (total_count 8))
    (" us" (total_count 7))
    (" us " (total_count 6))
    (" us rather bear " (total_count 4))
    (" w" (total_count 21))
    (" we" (total_count 4))
    (" wh" (total_count 6))
    (" would " (total_count 9))
    (" would be" (total_count 8))
    (" would bear the wh" (total_count 4))
    (" would beit of" (total_count 4))
    (a (total_count 78))
    (ag (total_count 4))
    (al (total_count 5))
    (am (total_count 7))
    (an (total_count 12))
    ("and " (total_count 9))
    (ar (total_count 18))
    ("ar " (total_count 8))
    ("ar th" (total_count 6))
    ("ar the wh" (total_count 4))
    (ard (total_count 4))
    (at (total_count 10))
    (ath (total_count 5))
    ("ather bear " (total_count 4))
    (ay (total_count 5))
    (b (total_count 21))
    (be (total_count 18))
    ("be, " (total_count 4))
    (bear (total_count 9))
    ("bear " (total_count 8))
    ("bear th" (total_count 6))
    ("bear the wh" (total_count 4))
    ("beit of" (total_count 4))
    ("\226\128\148" (total_count 5))
    (c (total_count 23))
    (ch (total_count 5))
    (co (total_count 9))
    (d (total_count 41))
    ("d " (total_count 26))
    ("d be" (total_count 8))
    ("d bear the wh" (total_count 4))
    ("d beit of" (total_count 4))
    ("d the" (total_count 4))
    (de (total_count 4))
    (dream (total_count 5))
    (e (total_count 147))
    ("e " (total_count 38))
    ("e s" (total_count 7))
    ("e slings " (total_count 6))
    ("e slings a" (total_count 4))
    ("e t" (total_count 7))
    ("e to " (total_count 4))
    ("e w" (total_count 5))
    ("e wh" (total_count 4))
    (e' (total_count 4))
    (e, (total_count 11))
    ("e, " (total_count 6))
    ("e, t" (total_count 4))
    (ea (total_count 19))
    (eam (total_count 5))
    (ear (total_count 10))
    ("ear " (total_count 8))
    ("ear th" (total_count 6))
    ("ear the wh" (total_count 4))
    (ei (total_count 5))
    ("eit of" (total_count 4))
    (en (total_count 5))
    (er (total_count 16))
    ("er " (total_count 7))
    ("er bear " (total_count 4))
    (ere' (total_count 4))
    (es (total_count 7))
    (evo (total_count 22))
    (evout (total_count 6))
    (evoutly (total_count 5))
    ("evoutly to" (total_count 4))
    (evowho (total_count 16))
    ("evowho would " (total_count 9))
    ("evowho would be" (total_count 8))
    ("evowho would bear the wh" (total_count 4))
    ("evowho would beit of" (total_count 4))
    (evowhois (total_count 7))
    ("evowhois us" (total_count 5))
    ("evowhois us rather bear " (total_count 4))
    (f (total_count 23))
    ("f " (total_count 14))
    ("f t" (total_count 5))
    (' (total_count 8))
    (g (total_count 15))
    (ga (total_count 4))
    ("gs " (total_count 6))
    ("gs a" (total_count 4))
    (h (total_count 76))
    (ha (total_count 7))
    (han (total_count 4))
    (he (total_count 31))
    ("he " (total_count 23))
    ("he s" (total_count 7))
    ("he slings " (total_count 6))
    ("he slings a" (total_count 4))
    ("he wh" (total_count 4))
    (her (total_count 6))
    ("her bear " (total_count 4))
    (hi (total_count 7))
    (ho (total_count 24))
    ("ho would " (total_count 9))
    ("ho would be" (total_count 8))
    ("ho would bear the wh" (total_count 4))
    ("ho would beit of" (total_count 4))
    (hois (total_count 7))
    ("hois us" (total_count 5))
    ("hois us rather bear " (total_count 4))
    ("hose " (total_count 4))
    (i (total_count 46))
    (ie (total_count 4))
    (in (total_count 10))
    (ing (total_count 7))
    ("ings " (total_count 6))
    ("ings a" (total_count 4))
    (is (total_count 14))
    ("is " (total_count 10))
    ("is us" (total_count 5))
    ("is us rather bear " (total_count 4))
    (it (total_count 7))
    ("it of" (total_count 4))
    (k (total_count 4))
    (, (total_count 22))
    (", " (total_count 9))
    (", t" (total_count 5))
    (", th" (total_count 4))
    (l (total_count 41))
    ("ld " (total_count 10))
    ("ld be" (total_count 8))
    ("ld bear the wh" (total_count 4))
    ("ld beit of" (total_count 4))
    (le (total_count 4))
    (li (total_count 8))
    ("lings " (total_count 6))
    ("lings a" (total_count 4))
    (ly (total_count 5))
    ("ly to" (total_count 4))
    (m (total_count 22))
    (me (total_count 6))
    ("ms " (total_count 5))
    (. (total_count 4))
    (n (total_count 45))
    (nd (total_count 10))
    ("nd " (total_count 9))
    (ng (total_count 8))
    ("ngs " (total_count 6))
    ("ngs a" (total_count 4))
    (ns (total_count 4))
    (nt (total_count 5))
    (o (total_count 117))
    ("o " (total_count 23))
    ("o be" (total_count 5))
    ("o be, " (total_count 4))
    ("o d" (total_count 5))
    ("o would " (total_count 9))
    ("o would be" (total_count 8))
    ("o would bear the wh" (total_count 4))
    ("o would beit of" (total_count 4))
    (of (total_count 15))
    ("of " (total_count 14))
    ("of t" (total_count 5))
    (ois (total_count 7))
    ("ois us" (total_count 5))
    ("ois us rather bear " (total_count 4))
    (om (total_count 5))
    (on (total_count 4))
    (or (total_count 6))
    ("ose " (total_count 5))
    (ou (total_count 24))
    ("ould " (total_count 9))
    ("ould be" (total_count 8))
    ("ould bear the wh" (total_count 4))
    ("ould beit of" (total_count 4))
    (out (total_count 7))
    (outly (total_count 5))
    ("outly to" (total_count 4))
    (ow (total_count 19))
    (owho (total_count 16))
    ("owho would " (total_count 9))
    ("owho would be" (total_count 8))
    ("owho would bear the wh" (total_count 4))
    ("owho would beit of" (total_count 4))
    (owhois (total_count 7))
    ("owhois us" (total_count 5))
    ("owhois us rather bear " (total_count 4))
    (p (total_count 10))
    (q (total_count 4))
    (r (total_count 71))
    ("r " (total_count 18))
    ("r bear " (total_count 4))
    ("r th" (total_count 6))
    ("r the wh" (total_count 4))
    (ra (total_count 7))
    ("rather bear " (total_count 4))
    (rd (total_count 4))
    (re (total_count 14))
    (re' (total_count 4))
    (rea (total_count 7))
    (ream (total_count 5))
    (rn (total_count 5))
    (ro (total_count 4))
    (ry (total_count 4))
    (s (total_count 83))
    ("s " (total_count 45))
    ("s a" (total_count 10))
    ("s of " (total_count 6))
    ("s r" (total_count 5))
    ("s rather bear " (total_count 4))
    ("s t" (total_count 5))
    ("s the " (total_count 4))
    ("s us" (total_count 5))
    ("s us rather bear " (total_count 4))
    (sco (total_count 4))
    (se (total_count 8))
    ("se " (total_count 5))
    (sl (total_count 8))
    ("slings " (total_count 6))
    ("slings a" (total_count 4))
    (st (total_count 4))
    (t (total_count 85))
    ("t " (total_count 11))
    ("t of" (total_count 5))
    ("t of " (total_count 4))
    (th (total_count 34))
    (the (total_count 21))
    ("the " (total_count 14))
    ("the wh" (total_count 4))
    (ther (total_count 6))
    ("ther bear " (total_count 4))
    (tho (total_count 5))
    (ti (total_count 4))
    (tly (total_count 5))
    ("tly to" (total_count 4))
    (to (total_count 12))
    ("to " (total_count 9))
    (tr (total_count 4))
    (tu (total_count 5))
    (u (total_count 44))
    ("uld " (total_count 9))
    ("uld be" (total_count 8))
    ("uld bear the wh" (total_count 4))
    ("uld beit of" (total_count 4))
    (un (total_count 4))
    (ur (total_count 6))
    (us (total_count 12))
    ("us " (total_count 8))
    ("us rather bear " (total_count 4))
    (ut (total_count 7))
    (utly (total_count 5))
    ("utly to" (total_count 4))
    (v (total_count 25))
    (vo (total_count 22))
    (vout (total_count 6))
    (voutly (total_count 5))
    ("voutly to" (total_count 4))
    (vowho (total_count 16))
    ("vowho would " (total_count 9))
    ("vowho would be" (total_count 8))
    ("vowho would bear the wh" (total_count 4))
    ("vowho would beit of" (total_count 4))
    (vowhois (total_count 7))
    ("vowhois us" (total_count 5))
    ("vowhois us rather bear " (total_count 4))
    (w (total_count 43))
    (we (total_count 4))
    (wh (total_count 22))
    (who (total_count 18))
    ("who would " (total_count 9))
    ("who would be" (total_count 8))
    ("who would bear the wh" (total_count 4))
    ("who would beit of" (total_count 4))
    (whois (total_count 7))
    ("whois us" (total_count 5))
    ("whois us rather bear " (total_count 4))
    (wo (total_count 10))
    ("would " (total_count 9))
    ("would be" (total_count 8))
    ("would bear the wh" (total_count 4))
    ("would beit of" (total_count 4))
    (y (total_count 16))
    ("y " (total_count 10))
    ("y t" (total_count 5))
    ("y to" (total_count 4))
    (y, (total_count 4)) |}]
;;
